#!/usr/bin/env node

/* eslint-disable no-console */

'use strict';

const Promise = require('bluebird');
const Path = require('path');
const FS = require('fs');
const json2md = require('json2md');
const pkg = require('./package.json');
const util = require('util');
const _ = require('lodash');
const {hideCategories, categoryNameMap} = require('./build.config.js');

const debug = require('debug')('build');

const absPath = (...paths) => Path.resolve(__dirname, ...paths);
const relativePath = (path) => Path.relative(__dirname, path);
const toCamelCase = (str) => str
    .replace(/\s(.)/g, ($1) => $1.toUpperCase())
    .replace(/\s/g, '')
    .replace(/^(.)/, ($1) => $1.toUpperCase());

const getStat = util.promisify(FS.stat);
const readFile = util.promisify(FS.readFile);
const readdir = util.promisify(FS.readdir);
const writeFile = util.promisify(FS.writeFile);

const categories = {};
const toc = [];

json2md.converters.ul = async (array) => {
    return `- ${array.join('\n- ')}`;
};

json2md.converters.md = async (filepath) => {
    return await readFile(filepath, {encoding: 'utf8'});
};

json2md.converters.toc = ({contents, type}) => {
    let tocStr;

    if (type === 'html') {
        const lastParent = {};

        const makeLink = (name) => `<a href="#${encodeURI(name.toLowerCase())}">${name}</a>`;

        const makeUI = () => ({
            children: [],
            toString(parentSpaces = '') {
                const {children} = this;
                const spaces = parentSpaces.repeat(2);
                const childStr = children.map((n) => n.toString(spaces)).join('\n');
                return `${parentSpaces}<ul>
${childStr}
${parentSpaces}</ul>`;
            },
        });

        const makeLI = ({name, level}) => ({
            name, level,
            children: [],
            toString(parentSpaces = '') {
                const {name, children} = this;
                const spaces = parentSpaces.repeat(2);

                if (children.length === 0) {
                    return `${parentSpaces}<li>${makeLink(name)}</li>`;
                } else {
                    const childStr = children.map((n) => n.toString(spaces)).join('\n');
                    return `${parentSpaces}<li>
${parentSpaces}  ${makeLink(name)}
${parentSpaces}  <ul>
${childStr}
${parentSpaces}  </ul>
${parentSpaces}</li>`;
                }
            },
        });

        const ui = makeUI();
        contents.forEach((c) => {
            const {level} = c;
            const li = makeLI(c);

            if (lastParent[level - 1]) {
                lastParent[level - 1].children.push(li);
            }
            lastParent[level] = li;

            if (level === 2) ui.children.push(li);
        });

        tocStr = ui.toString('  ');
    } else if (type === 'markdown') {
        const indent = 2;
        const ul = '-';
        const headers = [];
        const space = ' '.repeat(indent);
        const usedHeaders = {};
        contents.forEach((c) => {
            const {name, level} = c;
            let anchor = name.trim().toLowerCase().replace(/\s+/g, '-').replace(/-+$/, '');
            const usedHeader = usedHeaders[anchor];
            if (usedHeader) {
                usedHeaders[anchor] = usedHeader + 1;
                anchor = `${anchor}-${usedHeader}`;
            } else {
                usedHeaders[anchor] = 1;
            }
            const header = `${space.repeat(level - 2)}${ul} [${name}](#${anchor})`;
            headers.push(header);
        });

        tocStr = headers.join('\n');
    }

    return `## TOC

<!-- toc -->
<details close>
<summary>点击展开/折叠目录</summary>

${tocStr}

</details>
<!-- tocstop -->`;
};

async function getTitle(path) {
    const content = await readFile(path, {encoding: 'utf8'});
    const matched = content.match(/##? (.+)/);
    if (!matched) return '';

    let title = matched[1];
    title = title.replace(/\[(.*?)\]/g, (_m, p) => p);

    return title;
}

async function enterDir(dirName, parentPath, _parent, level = 3) {
    const dirPath = absPath(parentPath, dirName);
    const filenames = await readdir(dirPath);
    const children = [];
    const cate = categories[dirPath] = categories[dirPath] || {
        name: dirName, level, children, isDir: true, intro: undefined,
    };

    await Promise.map(filenames, async (filename, index) => {
        const curPath = absPath(dirPath, filename);
        const stats = await getStat(curPath)
        if (stats.isFile()) {
            if (filename.toLowerCase() === 'readme.md') {
                cate.intro = await readFile(curPath, {encoding: 'utf8'});
                return;
            }

            return getTitle(curPath).then((title) => {
                const relPath = relativePath(curPath);
                children[index] = `[${title}](${relPath})`;
            });
        } else if (stats.isDirectory()) {
            const subCate = await enterDir(filename, dirPath, cate, level + 1);
            children[index] = subCate;
        } else {
            // ignore
        }
    });

    return cate;
}

function handleCategories(categories, levelStd, structure) {
    _.chain(categories)
        .each((cate) => {
            const {name, level, intro} = cate;
            let {children = []} = cate;
            const cateName = categoryNameMap[name] || toCamelCase(name);

            if (cate.level !== levelStd) {
                return;
            }

            children = children.filter((c) => !!c);
            const list = children.filter((c) => !c.isDir);
            const childCates = children.filter((c) => c.isDir);

            toc.push({name: cateName, level});
            structure.push({[`h${level}`]: cateName});
            if (intro) structure.push(intro.trim() + '\n');
            structure.push({ul: list});

            handleCategories(childCates, levelStd + 1, structure);
        })
        .value();
}

async function build() {
    const filenames = await readdir(__dirname);
    let dirNames = filenames.filter((name) =>
        !name.startsWith('_') && !name.startsWith('.')
        && (!['node_modules'].includes(name)));

    dirNames = await Promise.map(dirNames, async (dirName) => {
        if (hideCategories.includes(dirName)) return null;

        const stats = await getStat(absPath(dirName));
        return stats.isDirectory() ? dirName : null;
    }).filter((name) => name);

    const rootCategories = await Promise.map(
        dirNames,
        (filename) => enterDir(filename, __dirname, null, 2)
    );


    const structure = [
        {md: absPath('_docs/meta.md')},
        {h1: '今天我学了什么 (Today I Learned)'},
        {blockquote: pkg.description},
        {md: absPath('_docs/intro.md')},
        {md: absPath('_docs/issue.md')},
        {md: absPath('_docs/license.md')},
        {toc: {contents: toc, type: 'markdown'}},
    ];

    debug('categories=%O', categories);
    handleCategories(rootCategories, 2, structure);

    structure.push({p: '**[⬆ 返回目录](#toc)**'});

    const content = await json2md.async(structure);

    const file = absPath('README.md');
    await writeFile(file, content);
    console.log('File Updated: %s', file);
}

(async () => {
    try {
        await build();
    } catch(err) {
        console.error('[Build failed] Error stack: %s', err.stack);
        process.exit(1);
    }
})();
